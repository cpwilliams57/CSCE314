--The Bell number Bn is the number of partitions of a set of size n. 
--Use your previous answer to write a function that computes the Bell 
--number for any non-negative n. (Note that B0 = B1 = 1.)
module main where 

type Set a = [a]
partitionSet :: Eq t => Set t -> Set( Set (Set t))

--This helper function takes a set and turns it into a list of 
--list of list 
--https://stackoverflow.com/questions/35423903/haskell-all-possible-partitions-of-a-list
bloat :: a -> [[a]] -> [[[a]]]
bloat x  []      = [[[x]]]
bloat x (xs:xss) = ((x:xs):xss) : map (xs:) (bloat x xss)

--this is the partition set function, it takes xs, and maps eveery 
--possible combination in xs into a list of lists 
partitionSet  []    = [[]]
partitionSet (x:xs) = [ys | yss <- partitionSet xs, ys <- bloat x yss]

--this takes the integer input and makes a list of size x
--with x ditinct elements 
listOf :: Int -> [Int]
listOf x = [1..x]

--This simply takes the size of th list generated by the above
--function
bellNum :: Int -> Int 
bellNum x = length(partitionSet(listOf x))